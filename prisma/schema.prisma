generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String      @id @default(uuid())
  name     String
  email    String      @unique
  password String
  wishes   Wish[]
  rooms    Room[]      @relation("UserRooms")
  status   Status[]
  address  Address[]
  choosed  IsChoosed[]
}

model Room {
  id         String      @id @default(uuid())
  title      String
  randomizer Boolean
  owner      String      @db.Uuid
  users      User[]      @relation("UserRooms")
  wishes     Wish[]
  addresses  Address[]
  statusess  Status[]
  chosed     IsChoosed[]
  limit      Int?
  url        String?
}

model Wish {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  roomId  String
  room    Room   @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Address {
  id      String @id @default(uuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])
  roomId  String
  room    Room   @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model Status {
  id     String  @id @default(uuid())
  status Boolean @default(false)
  userId String
  user   User    @relation(fields: [userId], references: [id])
  roomId String
  room   Room    @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}

model IsChoosed {
  id      String  @id @default(uuid())
  choosed Boolean @default(false)
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  roomId  String
  room    Room    @relation(fields: [roomId], references: [id])

  @@unique([userId, roomId])
}
